const TABS = [
  { id: 'review', label: 'Review & Tag' },
  { id: 'analysis', label: 'Analysis' },
  { id: 'library', label: 'Video Library' }
];

const TAG_CATEGORIES = [
  {
    id: 'content-type',
    name: 'Content Type',
    tags: [
      { id: 'interview', label: 'Interview' },
      { id: 'tutorial', label: 'Tutorial' },
      { id: 'webinar', label: 'Webinar' }
    ]
  },
  {
    id: 'tone',
    name: 'Tone',
    tags: [
      { id: 'formal', label: 'Formal' },
      { id: 'casual', label: 'Casual' },
      { id: 'technical', label: 'Technical' }
    ]
  },
  {
    id: 'audience',
    name: 'Intended Audience',
    tags: [
      { id: 'beginner', label: 'Beginner' },
      { id: 'intermediate', label: 'Intermediate' },
      { id: 'advanced', label: 'Advanced' }
    ]
  }
];

const VIDEO_FILENAME_PATTERN = /^(?<vehicle>[^-]+)-(?<date>\d{8})-(?<time>\d{6})(?<milliseconds>\d{0,4})?_video/i;

const RAW_VIDEOS = [
  {
    filename: 'm002-20250917-1758079317_video.mp4',
    src: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4',
    poster: 'https://dummyimage.com/960x540/312e81/ffffff&text=Vehicle+m002',
    description: 'Captured along the downtown corridor during peak traffic.'
  },
  {
    filename: 'm105-20250804-092512_video.mp4',
    src: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4',
    poster: 'https://dummyimage.com/960x540/1e293b/ffffff&text=Vehicle+m105',
    description: 'Morning training session focused on new route coverage.'
  },
  {
    filename: 'city-tour-demo.mp4',
    src: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4',
    poster: 'https://dummyimage.com/960x540/0f172a/ffffff&text=City+Tour',
    title: 'City Tour Walkthrough',
    description: 'Overview of the historic district and narration pacing.'
  }
];

const formatDate = (rawDate) => {
  if (!rawDate || rawDate.length !== 8) {
    return null;
  }

  const year = rawDate.slice(0, 4);
  const month = rawDate.slice(4, 6);
  const day = rawDate.slice(6, 8);
  return `${year}-${month}-${day}`;
};

const deriveMetadataFromFilename = (filename) => {
  if (!filename) {
    return null;
  }

  const match = filename.match(VIDEO_FILENAME_PATTERN);
  if (!match?.groups) {
    return null;
  }

  const { vehicle, date, time } = match.groups;
  const hour = time.slice(0, 2);
  const minute = time.slice(2, 4);

  return {
    vehicleId: vehicle,
    captureLabel: `${hour}:${minute}`,
    captureDate: formatDate(date)
  };
};

const buildVideoTitle = (filename, providedTitle) => {
  if (providedTitle) {
    return providedTitle;
  }

  const derived = deriveMetadataFromFilename(filename);
  if (!derived) {
    return filename;
  }

  return `Vehicle ${derived.vehicleId} Â· ${derived.captureLabel} capture`;
};

const buildVideoDescription = (filename, providedDescription) => {
  if (providedDescription) {
    return providedDescription;
  }

  const derived = deriveMetadataFromFilename(filename);
  if (!derived) {
    return `Autogenerated entry for ${filename}.`;
  }

  if (derived.captureDate) {
    return `Autogenerated entry for the ${derived.captureDate} capture.`;
  }

  return `Autogenerated entry for vehicle ${derived.vehicleId}.`;
};

const buildCaptureTimeTag = (filename) => {
  const derived = deriveMetadataFromFilename(filename);
  if (!derived) {
    return null;
  }

  return {
    id: `capture-time-${derived.captureLabel.replace(':', '')}`,
    label: derived.captureLabel
  };
};

const VIDEOS = RAW_VIDEOS.map((video) => {
  const filename = video.filename || video.src.split('/').pop() || 'video.mp4';
  const id = (video.id || filename).replace(/\.[^.]+$/, '');
  const captureTimeTag = buildCaptureTimeTag(filename);

  return {
    id,
    filename,
    src: video.src,
    poster: video.poster || '',
    title: buildVideoTitle(filename, video.title),
    description: buildVideoDescription(filename, video.description),
    captureTimeTag
  };
});

const state = {
  activeTab: 'review',
  selectedVideoId: VIDEOS[0]?.id || '',
  categorySelections: Object.fromEntries(TAG_CATEGORIES.map((category) => [category.id, []])),
  notes: ''
};

const elements = {};

document.addEventListener('DOMContentLoaded', () => {
  cacheElements();
  initialiseTabs();
  initialiseVideoSelector();
  initialiseNotes();
  renderApp();
});

function cacheElements() {
  elements.tabButtons = Array.from(document.querySelectorAll('[data-tab]'));
  elements.tabPanels = Array.from(document.querySelectorAll('[data-tab-panel]'));
  elements.videoSelect = document.getElementById('video-select');
  elements.prevVideoButton = document.getElementById('prev-video');
  elements.nextVideoButton = document.getElementById('next-video');
  elements.videoDescription = document.getElementById('video-description');
  elements.videoPlayer = document.getElementById('video-player');
  elements.notesField = document.getElementById('notes');
  elements.tagList = document.getElementById('tag-categories');
}

function initialiseTabs() {
  elements.tabButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const tabId = button.getAttribute('data-tab');
      if (tabId && tabId !== state.activeTab) {
        state.activeTab = tabId;
        renderTabs();
      }
    });
  });
}

function initialiseVideoSelector() {
  if (!elements.videoSelect) return;

  const placeholderOption = document.createElement('option');
  placeholderOption.value = '';
  placeholderOption.textContent = 'Choose a video';
  placeholderOption.disabled = true;
  elements.videoSelect.appendChild(placeholderOption);

  VIDEOS.forEach((video) => {
    const option = document.createElement('option');
    option.value = video.id;
    option.textContent = video.title;
    elements.videoSelect.appendChild(option);
  });

  elements.videoSelect.addEventListener('change', (event) => {
    state.selectedVideoId = event.target.value;
    renderReviewTab();
  });

  elements.prevVideoButton?.addEventListener('click', () => stepVideo(-1));
  elements.nextVideoButton?.addEventListener('click', () => stepVideo(1));
}

function initialiseNotes() {
  if (!elements.notesField) return;

  elements.notesField.addEventListener('input', (event) => {
    state.notes = event.target.value;
  });
}

function renderApp() {
  renderTabs();
  renderReviewTab();
}

function renderTabs() {
  elements.tabButtons.forEach((button) => {
    const tabId = button.getAttribute('data-tab');
    button.classList.toggle('tab-navigation__tab--active', tabId === state.activeTab);
  });

  elements.tabPanels.forEach((panel) => {
    const tabId = panel.getAttribute('data-tab-panel');
    if (tabId === state.activeTab) {
      panel.removeAttribute('hidden');
    } else {
      panel.setAttribute('hidden', '');
    }
  });
}

function renderReviewTab() {
  const hasVideos = VIDEOS.length > 0;
  const selectedVideo = VIDEOS.find((video) => video.id === state.selectedVideoId);

  if (elements.videoSelect) {
    elements.videoSelect.value = selectedVideo ? selectedVideo.id : '';
    elements.videoSelect.disabled = !hasVideos;
  }

  if (elements.prevVideoButton) {
    elements.prevVideoButton.disabled = !hasVideos;
  }

  if (elements.nextVideoButton) {
    elements.nextVideoButton.disabled = !hasVideos;
  }

  if (elements.notesField) {
    elements.notesField.disabled = !hasVideos;
    elements.notesField.value = state.notes;
  }

  renderVideoDescription(selectedVideo);
  renderVideoPlayer(selectedVideo);
  renderTagCategories(selectedVideo);
}

function renderVideoDescription(selectedVideo) {
  if (!elements.videoDescription) return;

  if (selectedVideo?.description) {
    elements.videoDescription.textContent = selectedVideo.description;
    elements.videoDescription.removeAttribute('hidden');
  } else {
    elements.videoDescription.textContent = '';
    elements.videoDescription.setAttribute('hidden', '');
  }
}

function renderVideoPlayer(selectedVideo) {
  if (!elements.videoPlayer) return;

  elements.videoPlayer.innerHTML = '';

  if (!selectedVideo?.src) {
    elements.videoPlayer.className = 'video-player video-player--empty';
    const message = document.createElement('p');
    message.textContent = 'Select a video to begin reviewing.';
    elements.videoPlayer.appendChild(message);
    return;
  }

  elements.videoPlayer.className = 'video-player';

  const videoElement = document.createElement('video');
  videoElement.controls = true;
  videoElement.preload = 'metadata';
  if (selectedVideo.poster) {
    videoElement.poster = selectedVideo.poster;
  }

  const source = document.createElement('source');
  source.src = selectedVideo.src;
  source.type = 'video/mp4';
  videoElement.appendChild(source);
  videoElement.appendChild(document.createTextNode('Your browser does not support the video tag.'));

  elements.videoPlayer.appendChild(videoElement);

  if (selectedVideo.title) {
    const title = document.createElement('p');
    title.className = 'video-player__title';
    title.textContent = `Currently playing: ${selectedVideo.title}`;
    elements.videoPlayer.appendChild(title);
  }
}

function renderTagCategories(selectedVideo) {
  if (!elements.tagList) return;

  elements.tagList.innerHTML = '';

  if (!selectedVideo) {
    return;
  }

  const categories = [...TAG_CATEGORIES];

  if (selectedVideo.captureTimeTag) {
    categories.push({
      id: 'capture-time',
      name: 'Capture Time',
      readOnly: true,
      tags: [selectedVideo.captureTimeTag]
    });
  }

  categories.forEach((category) => {
    const section = document.createElement('section');
    section.className = 'tag-category';

    const header = document.createElement('header');
    header.className = 'tag-category__header';
    const heading = document.createElement('h3');
    heading.textContent = category.name;
    header.appendChild(heading);
    section.appendChild(header);

    const tagContainer = document.createElement('div');
    tagContainer.className = 'tag-category__tags';

    const selectedTags = category.readOnly
      ? category.tags.map((tag) => tag.id)
      : state.categorySelections[category.id] || [];

    category.tags.forEach((tag) => {
      const button = document.createElement('button');
      const isActive = selectedTags.includes(tag.id);
      const isReadOnly = Boolean(category.readOnly);

      button.type = 'button';
      button.textContent = tag.label;
      button.className = `tag-chip${isActive ? ' tag-chip--active' : ''}${
        isReadOnly ? ' tag-chip--readonly' : ''
      }`;
      button.disabled = isReadOnly;

      if (!isReadOnly) {
        button.addEventListener('click', () => handleTagToggle(category.id, tag.id));
      }

      tagContainer.appendChild(button);
    });

    section.appendChild(tagContainer);
    elements.tagList.appendChild(section);
  });
}

function handleTagToggle(categoryId, tagId) {
  const currentTags = state.categorySelections[categoryId] || [];
  const isActive = currentTags.includes(tagId);
  const nextTags = isActive
    ? currentTags.filter((id) => id !== tagId)
    : [...currentTags, tagId];

  state.categorySelections = {
    ...state.categorySelections,
    [categoryId]: nextTags
  };

  renderTagCategories(VIDEOS.find((video) => video.id === state.selectedVideoId));
}

function stepVideo(direction) {
  if (!VIDEOS.length) return;

  const currentIndex = VIDEOS.findIndex((video) => video.id === state.selectedVideoId);
  const safeIndex = currentIndex === -1 ? 0 : currentIndex;
  const nextIndex = (safeIndex + direction + VIDEOS.length) % VIDEOS.length;

  state.selectedVideoId = VIDEOS[nextIndex].id;
  renderReviewTab();
}
