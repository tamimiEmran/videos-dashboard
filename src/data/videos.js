import { buildCaptureTimeTag } from '../utils/videoMetadata.js';

const VIDEO_GLOB = import.meta.glob('/videos/*.{mp4,webm,ogg}', {
  eager: true,
  import: 'default',
  query: '?url'
});

const FILENAME_PATTERN = /^(?<vehicle>[^-]+)-(?<date>\d{8})-(?<time>\d{6})(?<milliseconds>\d{0,4})?_video/i;

const formatDate = (rawDate) => {
  if (!rawDate || rawDate.length !== 8) {
    return null;
  }

  const year = rawDate.slice(0, 4);
  const month = rawDate.slice(4, 6);
  const day = rawDate.slice(6, 8);
  return `${year}-${month}-${day}`;
};

const deriveMetadataFromFilename = (filename) => {
  if (!filename) {
    return null;
  }

  const match = filename.match(FILENAME_PATTERN);
  if (!match?.groups) {
    return null;
  }

  const { vehicle, date, time } = match.groups;
  const hour = time.slice(0, 2);
  const minute = time.slice(2, 4);

  return {
    vehicleId: vehicle,
    captureLabel: `${hour}:${minute}`,
    captureDate: formatDate(date)
  };
};

const buildVideoTitle = (filename) => {
  const derived = deriveMetadataFromFilename(filename);
  if (!derived) {
    return filename;
  }

  return `Vehicle ${derived.vehicleId} Â· ${derived.captureLabel} capture`;
};

const buildVideoDescription = (filename) => {
  const derived = deriveMetadataFromFilename(filename);
  if (!derived) {
    return `Autogenerated entry for ${filename}.`;
  }

  if (derived.captureDate) {
    return `Autogenerated entry for the ${derived.captureDate} capture.`;
  }

  return `Autogenerated entry for vehicle ${derived.vehicleId}.`;
};

const discoveredVideos = Object.entries(VIDEO_GLOB).map(([path, src]) => {
  const filename = path.split('/').pop() ?? path;
  const id = filename.replace(/\.[^.]+$/, '');

  return {
    id,
    filename,
    title: buildVideoTitle(filename),
    description: buildVideoDescription(filename),
    src
  };
});

export const videos = discoveredVideos
  .sort((a, b) => a.filename.localeCompare(b.filename))
  .map((video) => ({
    ...video,
    captureTimeTag: buildCaptureTimeTag(video)
  }));
